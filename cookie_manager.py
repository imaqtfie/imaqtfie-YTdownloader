import os
import tempfile
import time
import platform
import shutil
import json
from pathlib import Path
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, 
    QComboBox, QProgressBar, QListWidget, QListWidgetItem,
    QMessageBox, QFileDialog, QCheckBox, QTextEdit, QLineEdit
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal, QSize
from PyQt6.QtGui import QFont
# Removed: from settings import AppSettings

try:
    import browser_cookie3
    BROWSER_COOKIE3_AVAILABLE = True
except ImportError:
    BROWSER_COOKIE3_AVAILABLE = False
    print("browser-cookie3 not available. Install with: pip install browser-cookie3")


class CookieExtractor(QThread):
    """Thread for extracting cookies from browsers"""
    extraction_complete = pyqtSignal(str, str)  # cookie_file, browser_name
    extraction_failed = pyqtSignal(str, str)  # browser_name, error_message
    progress_update = pyqtSignal(str)  # status_message

    def __init__(self, browser_name):
        super().__init__()
        self.browser_name = browser_name

    def run(self):
        try:
            self.progress_update.emit(f"Extracting cookies from {self.browser_name}...")
            
            if not BROWSER_COOKIE3_AVAILABLE:
                self.extraction_failed.emit(self.browser_name, "browser-cookie3 library not available")
                return

            # Extract cookies based on browser
            if self.browser_name == 'chrome':
                cookies = browser_cookie3.chrome(domain_name='.youtube.com')
            elif self.browser_name == 'firefox':
                cookies = browser_cookie3.firefox(domain_name='.youtube.com')
            elif self.browser_name == 'edge':
                cookies = browser_cookie3.edge(domain_name='.youtube.com')
            elif self.browser_name == 'brave':
                cookies = browser_cookie3.brave(domain_name='.youtube.com')
            elif self.browser_name == 'opera':
                cookies = browser_cookie3.opera(domain_name='.youtube.com')
            elif self.browser_name == 'safari':
                cookies = browser_cookie3.safari(domain_name='.youtube.com')
            else:
                self.extraction_failed.emit(self.browser_name, "Unsupported browser")
                return

            # Create temporary cookies file
            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
            
            # Write cookies in Netscape format
            temp_file.write("# Netscape HTTP Cookie File\n")
            temp_file.write("# https://curl.se/rfc/cookie_spec.html\n")
            temp_file.write("# This file was generated by YTDownloader\n\n")
            
            cookie_count = 0
            for cookie in cookies:
                if cookie.domain.startswith('.youtube.com') or cookie.domain == 'youtube.com':
                    # Format: domain, subdomain, path, secure, expiry, name, value
                    secure = "TRUE" if cookie.secure else "FALSE"
                    temp_file.write(f"{cookie.domain}\tTRUE\t{cookie.path}\t{secure}\t{cookie.expires}\t{cookie.name}\t{cookie.value}\n")
                    cookie_count += 1
            
            temp_file.close()
            
            if cookie_count > 0:
                self.progress_update.emit(f"Found {cookie_count} YouTube cookies from {self.browser_name}")
                self.extraction_complete.emit(temp_file.name, self.browser_name)
            else:
                self.extraction_failed.emit(self.browser_name, "No YouTube cookies found")
                os.unlink(temp_file.name)
                
        except Exception as e:
            self.extraction_failed.emit(self.browser_name, str(e))


class CookieManager:
    """Main cookie management class"""
    
    def __init__(self):
        self.cookie_file = None
        self.browser_name = None
        self.cookie_expiry = None
        self.extractors = []

    def detect_installed_browsers(self):
        """Detect which browsers are installed on the system"""
        browsers = {}
        system = platform.system().lower()
        
        if system == "darwin":  # macOS
            # Chrome
            chrome_path = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
            if os.path.exists(chrome_path):
                browsers['chrome'] = chrome_path
            
            # Brave - check both possible paths
            brave_paths = [
                "/Applications/Brave Browser.app/Contents/MacOS/Brave Browser",
                "/Applications/Brave.app/Contents/MacOS/Brave"
            ]
            for brave_path in brave_paths:
                if os.path.exists(brave_path):
                    browsers['brave'] = brave_path
                    break
            
            # Safari
            safari_path = "/Applications/Safari.app/Contents/MacOS/Safari"
            if os.path.exists(safari_path):
                browsers['safari'] = safari_path
                
        elif system == "windows":
            # Chrome
            chrome_paths = [
                os.path.expanduser("~/AppData/Local/Google/Chrome/Application/chrome.exe"),
                "C:/Program Files/Google/Chrome/Application/chrome.exe",
                "C:/Program Files (x86)/Google/Chrome/Application/chrome.exe"
            ]
            for path in chrome_paths:
                if os.path.exists(path):
                    browsers['chrome'] = path
                    break
            
            # Brave
            brave_paths = [
                os.path.expanduser("~/AppData/Local/BraveSoftware/Brave-Browser/Application/brave.exe"),
                "C:/Program Files/BraveSoftware/Brave-Browser/Application/brave.exe",
                "C:/Program Files (x86)/BraveSoftware/Brave-Browser/Application/brave.exe"
            ]
            for path in brave_paths:
                if os.path.exists(path):
                    browsers['brave'] = path
                    break
                    
        elif system == "linux":
            # Chrome
            chrome_paths = ["/usr/bin/google-chrome", "/usr/bin/chromium-browser"]
            for path in chrome_paths:
                if os.path.exists(path):
                    browsers['chrome'] = path
                    break
            
            # Brave
            brave_paths = ["/usr/bin/brave-browser", "/usr/bin/brave"]
            for path in brave_paths:
                if os.path.exists(path):
                    browsers['brave'] = path
                    break
        
        return browsers

    def test_cookies(self, cookie_file):
        """Test if cookies are valid by trying to access YouTube"""
        try:
            import requests
            from http.cookiejar import MozillaCookieJar
            
            # Check if the file exists and has content
            if not os.path.exists(cookie_file):
                return False
            
            # Check if file has content
            if os.path.getsize(cookie_file) == 0:
                return False
            
            # Load cookies
            cookie_jar = MozillaCookieJar(cookie_file)
            cookie_jar.load()
            
            # Check if we have any cookies
            if not cookie_jar:
                return False
            
            # Check if we have YouTube cookies specifically
            youtube_cookies = [cookie for cookie in cookie_jar if 'youtube.com' in cookie.domain]
            if not youtube_cookies:
                return False
            
            # Test with a simple YouTube request
            session = requests.Session()
            session.cookies = cookie_jar
            
            response = session.get('https://www.youtube.com', timeout=10)
            return response.status_code == 200 and 'youtube' in response.text.lower()
            
        except Exception as e:
            print(f"Cookie test error: {e}")
            return False

    def get_cookie_expiry(self, cookie_file):
        """Get the earliest expiry time from cookies"""
        try:
            from http.cookiejar import MozillaCookieJar
            
            cookie_jar = MozillaCookieJar(cookie_file)
            cookie_jar.load()
            
            earliest_expiry = None
            for cookie in cookie_jar:
                if cookie.expires and (earliest_expiry is None or cookie.expires < earliest_expiry):
                    earliest_expiry = cookie.expires
            
            return earliest_expiry
            
        except Exception:
            return None

    def are_cookies_expired(self):
        """Check if cookies have expired"""
        if not self.cookie_expiry:
            return True
        
        return time.time() > self.cookie_expiry

    def cleanup(self):
        """Clean up temporary cookie file"""
        if self.cookie_file and os.path.exists(self.cookie_file):
            try:
                os.unlink(self.cookie_file)
            except:
                pass

    def extract_brave_cookies_direct(self):
        """Extract cookies directly from Brave's cookie file"""
        try:
            import sqlite3
            
            # Brave cookie file path
            cookie_file = os.path.expanduser("~/Library/Application Support/BraveSoftware/Brave-Browser/Default/Cookies")
            
            if not os.path.exists(cookie_file):
                return None
            
            # Connect to the cookie database
            conn = sqlite3.connect(cookie_file)
            cursor = conn.cursor()
            
            # Get YouTube cookies using correct column names
            cursor.execute("""
                SELECT name, value, host_key, path, expires_utc, is_secure, is_httponly
                FROM cookies 
                WHERE host_key LIKE '%youtube.com%'
            """)
            
            cookies = cursor.fetchall()
            conn.close()
            
            if not cookies:
                return None
            
            # Create temporary cookies file
            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
            
            # Write cookies in Netscape format
            temp_file.write("# Netscape HTTP Cookie File\n")
            temp_file.write("# https://curl.se/rfc/cookie_spec.html\n")
            temp_file.write("# This file was generated by YTDownloader\n\n")
            
            cookie_count = 0
            for name, value, host_key, path, expires_utc, is_secure, is_httponly in cookies:
                if host_key.startswith('.youtube.com') or host_key == 'youtube.com':
                    secure_flag = "TRUE" if is_secure else "FALSE"
                    # Convert expires_utc to Unix timestamp (expires_utc is in microseconds since 1601)
                    expires = int(expires_utc / 1000000 - 11644473600) if expires_utc > 0 else 0
                    temp_file.write(f"{host_key}\tTRUE\t{path}\t{secure_flag}\t{expires}\t{name}\t{value}\n")
                    cookie_count += 1
            
            temp_file.close()
            
            if cookie_count > 0:
                return temp_file.name
            
            return None
            
        except Exception as e:
            print(f"Error extracting Brave cookies directly: {e}")
            return None

    def auto_detect_and_setup(self, preferred_browser=None):
        """Automatically detect and setup cookies"""
        browsers = self.detect_installed_browsers()
        
        # If preferred browser is specified and available, try it first
        if preferred_browser and preferred_browser in browsers:
            try:
                if preferred_browser == 'brave':
                    brave_cookie_file = self.extract_brave_cookies_direct()
                    if brave_cookie_file and self.test_cookies(brave_cookie_file):
                        self.cookie_file = brave_cookie_file
                        self.browser_name = 'brave'
                        self.cookie_expiry = self.get_cookie_expiry(brave_cookie_file)
                        return True
                else:
                    # Try browser-cookie3 for other browsers
                    if not BROWSER_COOKIE3_AVAILABLE:
                        return False
                    
                    if preferred_browser == 'chrome':
                        cookies = browser_cookie3.chrome(domain_name='.youtube.com')
                    elif preferred_browser == 'firefox':
                        cookies = browser_cookie3.firefox(domain_name='.youtube.com')
                    elif preferred_browser == 'edge':
                        cookies = browser_cookie3.edge(domain_name='.youtube.com')
                    elif preferred_browser == 'opera':
                        cookies = browser_cookie3.opera(domain_name='.youtube.com')
                    elif preferred_browser == 'safari':
                        cookies = browser_cookie3.safari(domain_name='.youtube.com')
                    else:
                        return False
                    
                    # Create temporary cookies file
                    temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
                    
                    # Write cookies in Netscape format
                    temp_file.write("# Netscape HTTP Cookie File\n")
                    temp_file.write("# https://curl.se/rfc/cookie_spec.html\n")
                    temp_file.write("# This file was generated by YTDownloader\n\n")
                    
                    cookie_count = 0
                    for cookie in cookies:
                        if cookie.domain.startswith('.youtube.com') or cookie.domain == 'youtube.com':
                            secure = "TRUE" if cookie.secure else "FALSE"
                            temp_file.write(f"{cookie.domain}\tTRUE\t{cookie.path}\t{secure}\t{cookie.expires}\t{cookie.name}\t{cookie.value}\n")
                            cookie_count += 1
                    
                    temp_file.close()
                    
                    if cookie_count > 0 and self.test_cookies(temp_file.name):
                        self.cookie_file = temp_file.name
                        self.browser_name = preferred_browser.title()  # Capitalize browser name
                        self.cookie_expiry = self.get_cookie_expiry(temp_file.name)
                        return True
                    else:
                        os.unlink(temp_file.name)
            except Exception:
                pass
        
        # Fall back to original logic if preferred browser fails or not specified
        # Try direct Brave extraction first
        if 'brave' in browsers:
            try:
                brave_cookie_file = self.extract_brave_cookies_direct()
                if brave_cookie_file and self.test_cookies(brave_cookie_file):
                    self.cookie_file = brave_cookie_file
                    self.browser_name = 'Brave'  # Capitalize Brave
                    self.cookie_expiry = self.get_cookie_expiry(brave_cookie_file)
                    return True
            except Exception:
                pass
        
        # Fall back to browser-cookie3 for other browsers
        for browser_name in browsers:
            try:
                if not BROWSER_COOKIE3_AVAILABLE:
                    return False
                
                if browser_name == 'chrome':
                    cookies = browser_cookie3.chrome(domain_name='.youtube.com')
                elif browser_name == 'firefox':
                    cookies = browser_cookie3.firefox(domain_name='.youtube.com')
                elif browser_name == 'edge':
                    cookies = browser_cookie3.edge(domain_name='.youtube.com')
                elif browser_name == 'brave':
                    # Skip Brave here since we tried direct extraction above
                    continue
                elif browser_name == 'opera':
                    cookies = browser_cookie3.opera(domain_name='.youtube.com')
                elif browser_name == 'safari':
                    cookies = browser_cookie3.safari(domain_name='.youtube.com')
                else:
                    continue
                
                # Create temporary cookies file
                temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
                
                # Write cookies in Netscape format
                temp_file.write("# Netscape HTTP Cookie File\n")
                temp_file.write("# https://curl.se/rfc/cookie_spec.html\n")
                temp_file.write("# This file was generated by YTDownloader\n\n")
                
                cookie_count = 0
                for cookie in cookies:
                    if cookie.domain.startswith('.youtube.com') or cookie.domain == 'youtube.com':
                        secure = "TRUE" if cookie.secure else "FALSE"
                        temp_file.write(f"{cookie.domain}\tTRUE\t{cookie.path}\t{secure}\t{cookie.expires}\t{cookie.name}\t{cookie.value}\n")
                        cookie_count += 1
                
                temp_file.close()
                
                if cookie_count > 0 and self.test_cookies(temp_file.name):
                    self.cookie_file = temp_file.name
                    self.browser_name = browser_name.title()  # Capitalize browser name
                    self.cookie_expiry = self.get_cookie_expiry(temp_file.name)
                    return True
                else:
                    os.unlink(temp_file.name)
                    
            except Exception:
                continue
        
        return False

    def convert_json_to_yt_dlp_format(self, json_cookie_file):
        """
        Converts a JSON cookie file (e.g., from browser extension) to the format
        expected by yt-dlp's --cookies option.
        """
        try:
            with open(json_cookie_file, 'r') as f:
                cookie_data = json.load(f)
            
            # Handle different JSON formats
            if isinstance(cookie_data, dict) and 'cookies' in cookie_data:
                # Format: {"url": "...", "cookies": [...]}
                cookies = cookie_data['cookies']
            elif isinstance(cookie_data, list):
                # Format: [cookie1, cookie2, ...]
                cookies = cookie_data
            else:
                print(f"Unknown JSON cookie format: {type(cookie_data)}")
                return None

            # yt-dlp expects a Netscape format cookie file
            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
            temp_file.write("# Netscape HTTP Cookie File\n")
            temp_file.write("# https://curl.se/rfc/cookie_spec.html\n")
            temp_file.write("# This file was generated by YTDownloader from JSON\n\n")

            cookie_count = 0
            for cookie in cookies:
                if not isinstance(cookie, dict):
                    continue
                
                # Extract cookie fields
                domain = cookie.get('domain', '')
                name = cookie.get('name', '')
                value = cookie.get('value', '')
                path = cookie.get('path', '/')
                secure = cookie.get('secure', False)
                http_only = cookie.get('httpOnly', False)
                expiration = cookie.get('expirationDate', 0)
                
                # Only process YouTube cookies
                if not domain or not (domain.endswith('youtube.com') or domain.endswith('.youtube.com')):
                    continue
                
                # Skip if missing essential fields
                if not name or not value:
                    continue
                
                # Convert to Netscape format
                # Format: domain, subdomain_flag, path, secure_flag, expiration, name, value
                subdomain_flag = "TRUE" if domain.startswith('.') else "FALSE"
                secure_flag = "TRUE" if secure else "FALSE"
                
                # Convert expiration to Unix timestamp if it's a float
                if isinstance(expiration, float):
                    expires = int(expiration)
                else:
                    expires = int(expiration) if expiration else 0
                
                # Write cookie in Netscape format
                temp_file.write(f"{domain}\t{subdomain_flag}\t{path}\t{secure_flag}\t{expires}\t{name}\t{value}\n")
                cookie_count += 1

            temp_file.close()
            
            if cookie_count > 0:
                print(f"Converted {cookie_count} cookies from JSON to yt-dlp format")
                return temp_file.name
            else:
                print("No valid YouTube cookies found in JSON file")
                os.unlink(temp_file.name)
                return None
                
        except Exception as e:
            print(f"Error converting JSON to yt-dlp format: {e}")
            return None

    def convert_json_string_to_yt_dlp_format(self, json_string):
        """
        Converts JSON cookie data from a string to the format expected by yt-dlp.
        This is useful for pasted JSON data.
        """
        try:
            cookie_data = json.loads(json_string)
            
            # Handle different JSON formats
            if isinstance(cookie_data, dict) and 'cookies' in cookie_data:
                # Format: {"url": "...", "cookies": [...]}
                cookies = cookie_data['cookies']
            elif isinstance(cookie_data, list):
                # Format: [cookie1, cookie2, ...]
                cookies = cookie_data
            else:
                print(f"Unknown JSON cookie format: {type(cookie_data)}")
                return None

            # yt-dlp expects a Netscape format cookie file
            temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
            temp_file.write("# Netscape HTTP Cookie File\n")
            temp_file.write("# https://curl.se/rfc/cookie_spec.html\n")
            temp_file.write("# This file was generated by YTDownloader from pasted JSON\n\n")

            cookie_count = 0
            for cookie in cookies:
                if not isinstance(cookie, dict):
                    continue
                
                # Extract cookie fields
                domain = cookie.get('domain', '')
                name = cookie.get('name', '')
                value = cookie.get('value', '')
                path = cookie.get('path', '/')
                secure = cookie.get('secure', False)
                http_only = cookie.get('httpOnly', False)
                expiration = cookie.get('expirationDate', 0)
                
                # Only process YouTube cookies
                if not domain or not (domain.endswith('youtube.com') or domain.endswith('.youtube.com')):
                    continue
                
                # Skip if missing essential fields
                if not name or not value:
                    continue
                
                # Convert to Netscape format
                # Format: domain, subdomain_flag, path, secure_flag, expiration, name, value
                subdomain_flag = "TRUE" if domain.startswith('.') else "FALSE"
                secure_flag = "TRUE" if secure else "FALSE"
                
                # Convert expiration to Unix timestamp if it's a float
                if isinstance(expiration, float):
                    expires = int(expiration)
                else:
                    expires = int(expiration) if expiration else 0
                
                # Write cookie in Netscape format
                temp_file.write(f"{domain}\t{subdomain_flag}\t{path}\t{secure_flag}\t{expires}\t{name}\t{value}\n")
                cookie_count += 1

            temp_file.close()
            
            if cookie_count > 0:
                print(f"Converted {cookie_count} cookies from pasted JSON to yt-dlp format")
                return temp_file.name
            else:
                print("No valid YouTube cookies found in pasted JSON")
                os.unlink(temp_file.name)
                return None
                
        except Exception as e:
            print(f"Error converting pasted JSON to yt-dlp format: {e}")
            return None


class CookieDetectionDialog(QDialog):
    """Dialog for automatic cookie detection"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Auto-Detect Browser Cookies")
        self.setModal(True)
        self.resize(500, 400)
        
        self.cookie_manager = CookieManager()
        self.extractors = []
        self.selected_cookie_file = None
        self.selected_browser = None
        
        self.setup_ui()
        self.detect_browsers()

    def setup_ui(self):
        """Setup the UI components"""
        layout = QVBoxLayout(self)
        layout.setSpacing(16)
        
        # Title
        title_label = QLabel("Auto-Detect Browser Cookies")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #1e293b; margin-bottom: 8px;")
        layout.addWidget(title_label)
        
        # Description
        desc_label = QLabel(
            "This will automatically detect and extract YouTube cookies from your installed browsers.\n"
            "Cookies help bypass age restrictions and bot detection."
        )
        desc_label.setWordWrap(True)
        desc_label.setStyleSheet("color: #64748b; font-size: 12px;")
        layout.addWidget(desc_label)
        
        # Browser list
        self.browser_list = QListWidget()
        self.browser_list.setStyleSheet("""
            QListWidget {
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                padding: 8px;
                background-color: #ffffff;
            }
            QListWidget::item {
                padding: 8px;
                border-radius: 4px;
                margin: 2px;
            }
            QListWidget::item:selected {
                background-color: #3b82f6;
                color: white;
            }
        """)
        layout.addWidget(self.browser_list)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Status label
        self.status_label = QLabel("Ready to detect browsers...")
        self.status_label.setStyleSheet("color: #64748b; font-size: 11px;")
        layout.addWidget(self.status_label)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        self.auto_detect_btn = QPushButton("Auto-Detect All")
        self.auto_detect_btn.setStyleSheet("""
            QPushButton {
                background-color: #3b82f6;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px 20px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2563eb;
            }
            QPushButton:disabled {
                background-color: #94a3b8;
            }
        """)
        self.auto_detect_btn.clicked.connect(self.auto_detect_all)
        
        self.manual_btn = QPushButton("Manual Setup")
        self.manual_btn.setStyleSheet("""
            QPushButton {
                background-color: #6b7280;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px 20px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #4b5563;
            }
        """)
        self.manual_btn.clicked.connect(self.manual_setup)
        
        self.cancel_btn = QPushButton("Cancel")
        self.cancel_btn.setStyleSheet("""
            QPushButton {
                background-color: #ef4444;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 10px 20px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #dc2626;
            }
        """)
        self.cancel_btn.clicked.connect(self.reject)
        
        button_layout.addWidget(self.auto_detect_btn)
        button_layout.addWidget(self.manual_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.cancel_btn)
        
        layout.addLayout(button_layout)

    def detect_browsers(self):
        """Detect installed browsers and populate the list"""
        browsers = self.cookie_manager.detect_installed_browsers()
        
        if not browsers:
            self.status_label.setText("No supported browsers detected")
            self.auto_detect_btn.setEnabled(False)
            return
        
        for browser_name, path in browsers.items():
            item = QListWidgetItem(f"{browser_name.title()} - {path}")
            item.setData(Qt.ItemDataRole.UserRole, browser_name)
            self.browser_list.addItem(item)
        
        self.status_label.setText(f"Found {len(browsers)} browser(s)")

    def auto_detect_all(self):
        """Automatically detect cookies from all browsers"""
        self.auto_detect_btn.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate
        
        browsers = self.cookie_manager.detect_installed_browsers()
        
        if not browsers:
            self.status_label.setText("No browsers available for detection")
            return
        
        # Try each browser
        for browser_name in browsers:
            self.status_label.setText(f"Trying {browser_name.title()}...")
            
            try:
                if self.cookie_manager.auto_detect_and_setup():
                    self.selected_cookie_file = self.cookie_manager.cookie_file
                    self.selected_browser = self.cookie_manager.browser_name
                    
                    self.status_label.setText(f"Successfully extracted cookies from {browser_name.title()}")
                    self.accept()
                    return
                else:
                    self.status_label.setText(f"No valid cookies found in {browser_name.title()}")
                    
            except Exception as e:
                self.status_label.setText(f"Failed to extract from {browser_name.title()}: {str(e)}")
        
        # If we get here, no cookies were found
        self.status_label.setText("No valid cookies found in any browser. Make sure you're logged into YouTube!")
        self.auto_detect_btn.setEnabled(True)
        self.progress_bar.setVisible(False)

    def manual_setup(self):
        """Show manual cookie file selection dialog"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "Select Cookies File",
            "",
            "Cookie Files (*.txt);;All Files (*)"
        )
        
        if file_path:
            if self.cookie_manager.test_cookies(file_path):
                self.selected_cookie_file = file_path
                self.selected_browser = "manual"
                self.status_label.setText("Manual cookies file loaded successfully")
                self.accept()
            else:
                QMessageBox.warning(
                    self,
                    "Invalid Cookies File",
                    "The selected file does not contain valid YouTube cookies.\n\n"
                    "Please make sure you're exporting cookies from a logged-in YouTube session."
                )

    def get_cookie_file(self):
        """Get the selected cookie file path"""
        return self.selected_cookie_file

    def get_browser_name(self):
        """Get the browser name used for extraction"""
        return self.selected_browser


class CookieHelpDialog(QDialog):
    """Help dialog explaining how to get cookies manually"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("How to Get YouTube Cookies")
        self.setModal(True)
        self.resize(600, 500)
        
        self.setup_ui()

    def setup_ui(self):
        """Setup the help UI"""
        layout = QVBoxLayout(self)
        layout.setSpacing(16)
        
        # Title
        title_label = QLabel("📋 How to Get YouTube Cookies")
        title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #1e293b;")
        layout.addWidget(title_label)
        
        # Help text
        help_text = QTextEdit()
        help_text.setReadOnly(True)
        help_text.setStyleSheet("""
            QTextEdit {
                color: #1e293b;
                background-color: #ffffff;
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                padding: 12px;
                font-size: 12px;
                line-height: 1.4;
            }
        """)
        help_text.setHtml("""
        <h3 style="color: #1e293b;">Method 1: Browser Extension (Recommended)</h3>
        <p><b>Step 1:</b> Install the "Get cookies.txt" extension:</p>
        <ul>
            <li><b>Chrome:</b> <a href="https://chrome.google.com/webstore/detail/get-cookiestxt/bgaddhkoddajcdgocldbbfleckgcbcid">Get cookies.txt</a></li>
            <li><b>Firefox:</b> <a href="https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/">cookies.txt</a></li>
        </ul>
        
        <p><b>Step 2:</b> Go to YouTube.com and make sure you're logged in</p>
        <p><b>Step 3:</b> Click the extension icon and export cookies</p>
        <p><b>Step 4:</b> Save the file as "youtube_cookies.txt"</p>
        
        <h3 style="color: #1e293b;">Method 2: Manual Export</h3>
        <p><b>Step 1:</b> Open browser DevTools (F12)</p>
        <p><b>Step 2:</b> Go to Application → Cookies → youtube.com</p>
        <p><b>Step 3:</b> Export cookies in Netscape format</p>
        
        <h3 style="color: #1e293b;">Important Notes:</h3>
        <ul>
            <li>✅ Cookies help bypass age restrictions and bot detection</li>
            <li>✅ They don't contain passwords or personal data</li>
            <li>⚠️ Cookies expire after some time (usually 30-90 days)</li>
            <li>⚠️ Re-export if downloads start failing</li>
            <li>🔒 Never share your cookies file</li>
        </ul>
        
        <p style="background-color: #fef3c7; padding: 8px; border-radius: 4px; border-left: 4px solid #f59e0b;">
        <b>💡 Tip:</b> The easiest method is using the browser extension. It automatically formats the cookies correctly.
        </p>
        """)
        
        layout.addWidget(help_text)
        
        # Buttons
        button_layout = QHBoxLayout()
        
        open_chrome_btn = QPushButton("Open Chrome Extension")
        open_chrome_btn.setStyleSheet("""
            QPushButton {
                background-color: #3b82f6;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2563eb;
            }
        """)
        open_chrome_btn.clicked.connect(lambda: self.open_url("https://chrome.google.com/webstore/detail/get-cookiestxt/bgaddhkoddajcdgocldbbfleckgcbcid"))
        
        open_firefox_btn = QPushButton("Open Firefox Extension")
        open_firefox_btn.setStyleSheet("""
            QPushButton {
                background-color: #3b82f6;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2563eb;
            }
        """)
        open_firefox_btn.clicked.connect(lambda: self.open_url("https://addons.mozilla.org/en-US/firefox/addon/cookies-txt/"))
        
        close_btn = QPushButton("Got it!")
        close_btn.setStyleSheet("""
            QPushButton {
                background-color: #10b981;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #059669;
            }
        """)
        close_btn.clicked.connect(self.accept)
        
        button_layout.addWidget(open_chrome_btn)
        button_layout.addWidget(open_firefox_btn)
        button_layout.addStretch()
        button_layout.addWidget(close_btn)
        
        layout.addLayout(button_layout)

    def open_url(self, url):
        """Open URL in default browser"""
        import webbrowser
        webbrowser.open(url)


# Utility functions for easy integration
def show_cookie_detection_dialog(parent=None):
    """Show the cookie detection dialog and return the result"""
    dialog = CookieDetectionDialog(parent)
    if dialog.exec() == QDialog.DialogCode.Accepted:
        return dialog.get_cookie_file(), dialog.get_browser_name()
    return None, None

def show_cookie_help_dialog(parent=None):
    """Show the cookie help dialog"""
    dialog = CookieHelpDialog(parent)
    dialog.exec()

def auto_detect_cookies(preferred_browser=None):
    """Automatically detect cookies from any available browser"""
    cookie_manager = CookieManager()
    if cookie_manager.auto_detect_and_setup(preferred_browser):
        return cookie_manager.cookie_file, cookie_manager.browser_name
    return None, None

def test_cookies(cookie_file):
    """Test if a cookie file is valid (supports both .txt and .json)"""
    if not cookie_file:
        return False
    
    cookie_manager = CookieManager()
    
    # Check if it's a JSON string (pasted data)
    if cookie_file.strip().startswith('{') or cookie_file.strip().startswith('['):
        # It's JSON data, convert and test
        converted_file = cookie_manager.convert_json_string_to_yt_dlp_format(cookie_file)
        if converted_file:
            # Test the converted file
            result = cookie_manager.test_cookies(converted_file)
            # Clean up temporary file
            try:
                os.unlink(converted_file)
            except:
                pass
            return result
        else:
            return False
    
    # Check if it's a file path
    if not os.path.exists(cookie_file):
        return False
    
    # Check if it's a JSON file
    if cookie_file.lower().endswith('.json'):
        # Convert JSON to yt-dlp format and test
        converted_file = cookie_manager.convert_json_to_yt_dlp_format(cookie_file)
        if converted_file:
            # Test the converted file
            result = cookie_manager.test_cookies(converted_file)
            # Clean up temporary file
            try:
                os.unlink(converted_file)
            except:
                pass
            return result
        else:
            return False
    else:
        # Test regular .txt file
        return cookie_manager.test_cookies(cookie_file)


class CookiesDialog(QDialog):
    """Dialog to manage all cookie-related settings in one place."""
    def __init__(self, app_settings=None, parent=None):
        super().__init__(parent)
        from PyQt6.QtWidgets import QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QLineEdit, QCheckBox
        from PyQt6.QtCore import QSize
        self.setWindowTitle("Cookies")
        # Lazy import to avoid circular import at module load
        if app_settings is None:
            try:
                from settings import AppSettings as _AppSettings
                self._settings = _AppSettings()
            except Exception:
                self._settings = None
        else:
            self._settings = app_settings
        self.setMinimumWidth(520)

        # Theme-aware base stylesheet
        try:
            from theme import get_palette, button_style
            p = get_palette()
            self.setStyleSheet(f"""
                QDialog {{ background-color: {p['surface']}; color: {p['text']}; }}
                QLabel {{ color: {p['text']}; font-size: 12px; }}
                QLineEdit {{ color: {p['text']}; background-color: {p['surface']}; border: 1px solid {p['border']}; border-radius: 6px; padding: 6px 10px; font-size: 12px; }}
                QCheckBox {{ color: {p['text']}; font-size: 12px; padding: 4px 0px; }}
            """)
            _btn_primary = lambda b: b.setStyleSheet(button_style('primary', radius=6, padding='8px 14px'))
            _btn_info = lambda b: b.setStyleSheet(button_style('info', radius=6, padding='8px 14px'))
            _btn_success = lambda b: b.setStyleSheet(button_style('success', radius=6, padding='8px 14px'))
        except Exception:
            _btn_primary = _btn_info = _btn_success = lambda b: None

        layout = QVBoxLayout(self)
        layout.setSpacing(12)

        # Status Header
        self.status_label = QLabel("Cookie status: Not tested")
        layout.addWidget(self.status_label)

        # Disable cookies
        self.disable_cb = QCheckBox("Disable cookies")
        if self._settings:
            self.disable_cb.setChecked(self._settings.get_disable_cookies())
        layout.addWidget(self.disable_cb)

        # Auto-detect section
        autodetect_row = QHBoxLayout()
        autodetect_btn = QPushButton("Auto-Detect Now")
        _btn_info(autodetect_btn)
        autodetect_btn.clicked.connect(self._do_autodetect)
        autodetect_row.addWidget(autodetect_btn)
        autodetect_row.addStretch()
        layout.addLayout(autodetect_row)

        # Manual .txt
        row_txt = QHBoxLayout()
        row_txt.addWidget(QLabel("Cookies .txt:"))
        self.txt_input = QLineEdit()
        self.txt_input.setPlaceholderText("Path to cookies.txt")
        if self._settings:
            self.txt_input.setText(self._settings.get_cookie_file_path())
        btn_browse_txt = QPushButton("Browse")
        _btn_info(btn_browse_txt)
        btn_browse_txt.clicked.connect(self._browse_txt)
        btn_test_txt = QPushButton("Test")
        _btn_success(btn_test_txt)
        btn_test_txt.clicked.connect(self._test_txt)
        row_txt.addWidget(self.txt_input)
        row_txt.addWidget(btn_browse_txt)
        row_txt.addWidget(btn_test_txt)
        layout.addLayout(row_txt)

        # JSON file
        row_json = QHBoxLayout()
        row_json.addWidget(QLabel("Cookies JSON:"))
        self.json_input = QLineEdit()
        self.json_input.setPlaceholderText("Path to cookies.json or pasted JSON")
        if self._settings:
            self.json_input.setText(self._settings.get_json_cookie_file_path())
        btn_browse_json = QPushButton("Browse JSON")
        _btn_info(btn_browse_json)
        btn_browse_json.clicked.connect(self._browse_json)
        btn_test_json = QPushButton("Test JSON")
        _btn_success(btn_test_json)
        btn_test_json.clicked.connect(self._test_json)
        row_json.addWidget(self.json_input)
        row_json.addWidget(btn_browse_json)
        row_json.addWidget(btn_test_json)
        layout.addLayout(row_json)

        # Paste JSON
        row_paste = QHBoxLayout()
        row_paste.addWidget(QLabel("Paste JSON:"))
        btn_paste = QPushButton("Paste JSON")
        _btn_info(btn_paste)
        btn_paste.clicked.connect(self._paste_json)
        btn_test_pasted = QPushButton("Test Pasted")
        _btn_success(btn_test_pasted)
        btn_test_pasted.clicked.connect(self._test_pasted)
        row_paste.addWidget(btn_paste)
        row_paste.addWidget(btn_test_pasted)
        row_paste.addStretch()
        layout.addLayout(row_paste)

        # Buttons
        btns = QHBoxLayout()
        btns.addStretch()
        btn_save = QPushButton("Save")
        _btn_primary(btn_save)
        btn_cancel = QPushButton("Close")
        _btn_info(btn_cancel)
        btn_save.clicked.connect(self._on_save)
        btn_cancel.clicked.connect(self.reject)
        btns.addWidget(btn_save)
        btns.addWidget(btn_cancel)
        layout.addLayout(btns)

        self._refresh_status()

    def _refresh_status(self):
        # Show a quick summary of current cookies state
        try:
            current = None
            if self._settings:
                current = self._settings.get_cookie_file_path() or self._settings.get_json_cookie_file_path()
            if current:
                ok = test_cookies(current)
                self.status_label.setText(f"Cookie status: {'✅ Valid' if ok else '❌ Invalid'}")
            else:
                self.status_label.setText("Cookie status: Not set")
        except Exception:
            self.status_label.setText("Cookie status: Not set")

    def _on_save(self):
        # Persist inputs and disable flag
        if self._settings:
            self._settings.set_disable_cookies(self.disable_cb.isChecked())
            self._settings.set_cookie_file_path(self.txt_input.text().strip())
            self._settings.set_json_cookie_file_path(self.json_input.text().strip())
        self.accept()

    def _browse_txt(self):
        from PyQt6.QtWidgets import QFileDialog
        fp, _ = QFileDialog.getOpenFileName(self, "Select cookies.txt", "", "Cookie Files (*.txt);;All Files (*)")
        if fp:
            self.txt_input.setText(fp)
            self._refresh_status()

    def _test_txt(self):
        fp = self.txt_input.text().strip()
        ok = test_cookies(fp)
        self.status_label.setText(f"Cookie status: {'✅ Valid' if ok else '❌ Invalid'} (.txt)")

    def _browse_json(self):
        from PyQt6.QtWidgets import QFileDialog
        fp, _ = QFileDialog.getOpenFileName(self, "Select cookies.json", "", "JSON Cookie Files (*.json);;All Files (*)")
        if fp:
            self.json_input.setText(fp)
            self._refresh_status()

    def _test_json(self):
        fp = self.json_input.text().strip()
        ok = test_cookies(fp)
        self.status_label.setText(f"Cookie status: {'✅ Valid' if ok else '❌ Invalid'} (JSON)")

    def _paste_json(self):
        from PyQt6.QtWidgets import QApplication
        data = QApplication.clipboard().text()
        if data and (data.strip().startswith('{') or data.strip().startswith('[')):
            ok = test_cookies(data)
            self.status_label.setText(f"Cookie status: {'✅ Valid' if ok else '❌ Invalid'} (Pasted JSON)")
            if ok:
                # Store pasted data into JSON field so it persists
                self.json_input.setText(data)
        else:
            self.status_label.setText("Cookie status: No valid JSON in clipboard")

    def _test_pasted(self):
        data = self.json_input.text().strip()
        ok = test_cookies(data)
        self.status_label.setText(f"Cookie status: {'✅ Valid' if ok else '❌ Invalid'} (Pasted JSON)")

    def _do_autodetect(self):
        cookie_file, browser = show_cookie_detection_dialog(self)
        if cookie_file:
            self.txt_input.setText(cookie_file)
            self.status_label.setText(f"Cookie status: ✅ Detected from {browser}")


def show_cookies_dialog(parent=None):
    dlg = CookiesDialog(parent=parent)
    return dlg.exec()
